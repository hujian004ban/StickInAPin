{"version":3,"sources":["MapScrollView.js"],"names":["cc","Class","extends","ScrollView","getMaxScrollOffset","viewSize","_view","getContentSize","contentSize","content","width","scale","height","horizontalMaximizeOffset","verticalMaximizeOffset","v2","_calculateMovePercentDelta","options","anchor","applyToHorizontal","applyToVertical","_calculateBoundary","clampf","scrollSize","bottomDeta","_getContentBottomBoundary","_bottomBoundary","leftDeta","_getContentLeftBoundary","_leftBoundary","moveDelta","totalScrollDelta","x","y","_moveContentToTopLeft","scrollViewSize","_updateScrollBarState","_moveContent","_adjustContentOutOfBoundary","_clampDelta","delta","_startAttenuatingAutoScroll","deltaMove","initialVelocity","time","_calculateAutoScrollTimeByInitalSpeed","mag","targetDelta","normalize","scrollviewSize","totalMoveWidth","totalMoveHeight","attenuatedFactorX","_calculateAttenuatedFactor","attenuatedFactorY","brake","originalMoveLength","factor","add","Math","sqrt","mul","_startAutoScroll","contentPos","getContentPosition","getAnchorPoint","_getContentRightBoundary","_getContentTopBoundary","verticalScrollBar","hide","show","horizontalScrollBar"],"mappings":"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","file":"MapScrollView.js","sourceRoot":"../../../../../assets/scripts/map","sourcesContent":["/**\n * 继承自 cc.ScrollView\n * 这里只修改了有关计算content大小的方法（计算大小考虑缩放的影响）\n */\ncc.Class({\n    extends: cc.ScrollView,\n\n    /**\n     * !#en Get the maximize available  scroll offset\n     * !#zh 获取滚动视图最大可以滚动的偏移量\n     * @method getMaxScrollOffset\n     * @return {Vec2} - A Vec2 value indicate the maximize scroll offset in x and y axis.\n     */\n    getMaxScrollOffset () {\n        let viewSize = this._view.getContentSize();\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        let horizontalMaximizeOffset =  contentSize.width - viewSize.width;\n        let verticalMaximizeOffset = contentSize.height - viewSize.height;\n        horizontalMaximizeOffset = horizontalMaximizeOffset >= 0 ? horizontalMaximizeOffset : 0;\n        verticalMaximizeOffset = verticalMaximizeOffset >=0 ? verticalMaximizeOffset : 0;\n\n        return cc.v2(horizontalMaximizeOffset, verticalMaximizeOffset);\n    },\n\n    _calculateMovePercentDelta (options) {\n        let anchor = options.anchor;\n        let applyToHorizontal = options.applyToHorizontal;\n        let applyToVertical = options.applyToVertical;\n        this._calculateBoundary();\n\n        anchor = anchor.clampf(cc.v2(0, 0), cc.v2(1, 1));\n\n        let scrollSize = this._view.getContentSize();\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        let bottomDeta = this._getContentBottomBoundary() - this._bottomBoundary;\n        bottomDeta = -bottomDeta;\n\n        let leftDeta = this._getContentLeftBoundary() - this._leftBoundary;\n        leftDeta = -leftDeta;\n\n        let moveDelta = cc.v2(0, 0);\n        let totalScrollDelta = 0;\n        if (applyToHorizontal) {\n            totalScrollDelta = contentSize.width - scrollSize.width;\n            moveDelta.x = leftDeta - totalScrollDelta * anchor.x;\n        }\n\n        if (applyToVertical) {\n            totalScrollDelta = contentSize.height - scrollSize.height;\n            moveDelta.y = bottomDeta - totalScrollDelta * anchor.y;\n        }\n\n        return moveDelta;\n    },\n\n    _moveContentToTopLeft (scrollViewSize) {\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        let bottomDeta = this._getContentBottomBoundary() - this._bottomBoundary;\n        bottomDeta = -bottomDeta;\n        let moveDelta = cc.v2(0, 0);\n        let totalScrollDelta = 0;\n\n        let leftDeta = this._getContentLeftBoundary() - this._leftBoundary;\n        leftDeta = -leftDeta;\n\n        if (contentSize.height < scrollViewSize.height) {\n            totalScrollDelta = contentSize.height - scrollViewSize.height;\n            moveDelta.y = bottomDeta - totalScrollDelta;\n        }\n\n        if (contentSize.width < scrollViewSize.width) {\n            totalScrollDelta = contentSize.width - scrollViewSize.width;\n            moveDelta.x = leftDeta;\n        }\n\n        this._updateScrollBarState();\n        this._moveContent(moveDelta);\n        this._adjustContentOutOfBoundary();\n    },\n\n    _clampDelta (delta) {\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        let scrollViewSize = this._view.getContentSize();\n        if (contentSize.width < scrollViewSize.width) {\n            delta.x = 0;\n        }\n        if (contentSize.height < scrollViewSize.height) {\n            delta.y = 0;\n        }\n\n        return delta;\n    },\n\n    _startAttenuatingAutoScroll (deltaMove, initialVelocity) {\n        let time = this._calculateAutoScrollTimeByInitalSpeed(initialVelocity.mag());\n\n\n        let targetDelta = deltaMove.normalize();\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        let scrollviewSize = this._view.getContentSize();\n\n        let totalMoveWidth = (contentSize.width - scrollviewSize.width);\n        let totalMoveHeight = (contentSize.height - scrollviewSize.height);\n\n        let attenuatedFactorX = this._calculateAttenuatedFactor(totalMoveWidth);\n        let attenuatedFactorY = this._calculateAttenuatedFactor(totalMoveHeight);\n\n        targetDelta = cc.v2(targetDelta.x * totalMoveWidth * (1 - this.brake) * attenuatedFactorX, targetDelta.y * totalMoveHeight * attenuatedFactorY * (1 - this.brake));\n\n        let originalMoveLength = deltaMove.mag();\n        let factor = targetDelta.mag() / originalMoveLength;\n        targetDelta = targetDelta.add(deltaMove);\n\n        if (this.brake > 0 && factor > 7) {\n            factor = Math.sqrt(factor);\n            targetDelta = deltaMove.mul(factor).add(deltaMove);\n        }\n\n        if (this.brake > 0 && factor > 3) {\n            factor = 3;\n            time = time * factor;\n        }\n\n        if (this.brake === 0 && factor > 1) {\n            time = time * factor;\n        }\n\n        this._startAutoScroll(targetDelta, time, true);\n    },\n\n    _getContentLeftBoundary () {\n        let contentPos = this.getContentPosition();\n\n        let contentSize = this.content.getContentSize();\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        return contentPos.x - this.content.getAnchorPoint().x * contentSize.width;\n    },\n\n    _getContentRightBoundary () {\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        return this._getContentLeftBoundary() + contentSize.width;\n    },\n\n    _getContentTopBoundary () {\n        let contentSize = this.content.getContentSize();\n\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        return this._getContentBottomBoundary() + contentSize.height;\n    },\n\n    _getContentBottomBoundary () {\n        let contentPos = this.getContentPosition();\n\n        let contentSize = this.content.getContentSize();\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        return contentPos.y - this.content.getAnchorPoint().y * contentSize.height;\n    },\n\n    _updateScrollBarState () {\n        if (!this.content) {\n            return;\n        }\n        let contentSize = this.content.getContentSize();\n        contentSize.width *= this.content.scale;\n        contentSize.height *= this.content.scale;\n\n        let scrollViewSize = this._view.getContentSize();\n        if (this.verticalScrollBar) {\n            if (contentSize.height < scrollViewSize.height) {\n                this.verticalScrollBar.hide();\n            } else {\n                this.verticalScrollBar.show();\n            }\n        }\n\n        if (this.horizontalScrollBar) {\n            if (contentSize.width < scrollViewSize.width) {\n                this.horizontalScrollBar.hide();\n            } else {\n                this.horizontalScrollBar.show();\n            }\n        }\n    },\n\n\n});"]}
{"version":3,"sources":["ShaderUtils.js"],"names":["Effect","Gray","Normal","Bright","cc","Class","extends","Component","statics","Shader","vert_web","vert_native","frag","init","shaderPrograms","setShader","renderComp","shaderName","game","renderType","RENDER_TYPE_CANVAS","materialName","material","Material","getBuiltinMaterial","getInstantiatedMaterial","setMaterial","log"],"mappings":";;;;;;AAAA;;;;;AAKA,IAAMA,SAAS;AACXC,UAAM,MADK,EACI;AACfC,YAAQ,QAFG,EAEQ;AACnBC,YAAQ,QAHG,CAGQ;AAHR,CAAf;;AAMAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,aAAS;AACLR,gBAAQA,MADH;;AAGLS,gBAAQ;AACJ,sBAAU,EAACC,UAAU,oBAAX,EAAiCC,aAAa,oBAA9C,EAAoEC,MAAM,aAA1E,EADN;AAEJ,oBAAQ,EAACF,UAAU,oBAAX,EAAiCC,aAAa,oBAA9C,EAAoEC,MAAM,WAA1E,EAFJ;AAGJ,sBAAU,EAACF,UAAU,oBAAX,EAAiCC,aAAa,oBAA9C,EAAoEC,MAAM,aAA1E;AAHN,SAHH;;AAULC,cAAM,gBAAY;AACd;AACA,iBAAKC,cAAL,GAAsB,EAAtB;AACH,SAbI;;AAgBL;AACAC,mBAAW,mBAAUC,UAAV,EAAsBC,UAAtB,EAAkC;AACzC,gBAAIb,GAAGc,IAAH,CAAQC,UAAR,KAAuBf,GAAGc,IAAH,CAAQE,kBAAnC,EAAuD;AACnD;AACH;AACD,gBAAIC,eAAe,EAAnB;AACA,gBAAIJ,cAAcjB,OAAOE,MAAzB,EAAiC;AAC7BmB,+BAAe,WAAf;AACH,aAFD,MAEO,IAAIJ,cAAcjB,OAAOC,IAAzB,EAA+B;AAClCoB,+BAAe,gBAAf;AACH,aAFM,MAEA,IAAIJ,cAAcjB,OAAOG,MAAzB,EAAiC;AACpCkB,+BAAe,kBAAf;AACH;AACD,gBAAIC,WAAWlB,GAAGmB,QAAH,CAAYC,kBAAZ,CAA+BH,YAA/B,CAAf;AACA,gBAAIC,QAAJ,EAAc;AACVA,2BAAWlB,GAAGmB,QAAH,CAAYE,uBAAZ,CAAoCH,QAApC,EAA8CN,UAA9C,CAAX;AACAA,2BAAWU,WAAX,CAAuB,CAAvB,EAA0BJ,QAA1B;AACH,aAHD,MAGO;AACHlB,mBAAGuB,GAAH,CAAO,2BAA2BV,UAA3B,GAAwC,eAA/C;AACH;AACJ;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxFK;AAHJ,CAAT","file":"ShaderUtils.js","sourceRoot":"../../../../../../assets/scripts/framework/common","sourcesContent":["/**\n * Created by skyxu on 2019/11/27.\n * 适用于ccc2.x版本\n */\n\nconst Effect = {\n    Gray: 'Gray',  // 置灰\n    Normal: 'Normal',  //\n    Bright: 'Bright',  //\n};\n\ncc.Class({\n    extends: cc.Component,\n\n    statics: {\n        Effect: Effect,\n\n        Shader: {\n            'Normal': {vert_web: 'Default_noMVP_vert', vert_native: 'Default_noMVP_vert', frag: 'Normal_frag'},\n            'Gray': {vert_web: 'Default_noMVP_vert', vert_native: 'Default_noMVP_vert', frag: 'Gray_frag'},\n            'Bright': {vert_web: 'Default_noMVP_vert', vert_native: 'Default_noMVP_vert', frag: 'Bright_frag'},\n        },\n\n\n        init: function () {\n            // programs\n            this.shaderPrograms = {};\n        },\n\n\n        // 2.x版本引擎需要改成使用material\n        setShader: function (renderComp, shaderName) {\n            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\n                return;\n            }\n            let materialName = '';\n            if (shaderName == Effect.Normal) {\n                materialName = '2d-sprite';\n            } else if (shaderName == Effect.Gray) {\n                materialName = '2d-gray-sprite';\n            } else if (shaderName == Effect.Bright) {\n                materialName = '2d-bright-sprite';\n            }\n            let material = cc.Material.getBuiltinMaterial(materialName);\n            if (material) {\n                material = cc.Material.getInstantiatedMaterial(material, renderComp);\n                renderComp.setMaterial(0, material);\n            } else {\n                cc.log(\"ShaderUtils: matrial: \" + shaderName + \" is not exsit\");\n            }\n        },\n\n\n        // ------以下为1.x版本引擎使用------\n        // setShader: function (component, shaderName) {\n        //     if (!component || !this.Shader[shaderName]) {\n        //         return;\n        //     }\n        //     let glProgram = this.shaderPrograms[shaderName];\n        //     if (!glProgram) {\n        //         let shaderCfg = this.Shader[shaderName];\n        //         let vert = null;\n        //         if (cc.sys.isNative) {\n        //             vert = require(shaderCfg.vert_native);\n        //         } else {\n        //             vert = require(shaderCfg.vert_web);\n        //         }\n        //         let frag = require(shaderCfg.frag);\n        //         glProgram = this.getGlPropgram(vert, frag);\n        //         this.shaderPrograms[shaderName] = glProgram;\n        //     }\n        //\n        //     this.setProgram(component, glProgram);\n        // },\n        //\n        // setProgram:function (component, glProgram) {\n        //     if (cc.sys.isNative) {\n        //         var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(glProgram);\n        //         if (component) {\n        //             component.setGLProgramState(glProgram_state);\n        //         }\n        //     } else {\n        //         if (component) {\n        //             component.setShaderProgram(glProgram);\n        //         }\n        //     }\n        // },\n        //\n        // getGlPropgram: function(vert, frag) {\n        //     var glProgram = new cc.GLProgram();\n        //\n        //     if (cc.sys.isNative) {\n        //         glProgram.initWithString(vert, frag);\n        //     } else {\n        //         glProgram.initWithVertexShaderByteArray(vert, frag);\n        //         glProgram.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);\n        //         glProgram.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);\n        //         glProgram.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);\n        //     }\n        //     glProgram.link();\n        //     glProgram.updateUniforms();\n        //     return glProgram;\n        // },\n    },\n});\n"]}
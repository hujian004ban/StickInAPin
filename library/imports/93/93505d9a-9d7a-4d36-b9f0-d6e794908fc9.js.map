{"version":3,"sources":["../../../../../assets/scripts/data/assets/scripts/data/DataMng.js"],"names":["UpStarNeedData","require","EnemyAttrData","BgColorData","UserData","DataBase","cc","Class","ctor","loadCounts","upStarNeedData","enemyAttrData","bgColorData","userData","loadDataFromLocalFile","progressCb","completeCb","loadSavedData","keys","Object","log","JSON","stringify","filter","k","hasOwnProperty","key","obj","fileName","fileDir","loader","loadRes","JsonAsset","err","data","error","initData","call","json","length","loadData","saveDataToLocal","saveData"],"mappings":";;;;;;AAAA;;;;;;AAMA,IAAIA,iBAAiBC,QAAQ,kBAAR,CAArB;AACA,IAAIC,gBAAgBD,QAAQ,iBAAR,CAApB;AACA,IAAIE,cAAcF,QAAQ,eAAR,CAAlB;;AAEA,IAAIG,WAAWH,QAAQ,YAAR,CAAf;AACA,IAAII,WAAWJ,QAAQ,YAAR,CAAf;;AAEAK,GAAGC,KAAH,CAAS;AACLC,QADK,kBACE;AACH,aAAKC,UAAL,GAAkB,CAAlB;;AAEA;AACA,aAAKC,cAAL,GAAsB,IAAIV,cAAJ,EAAtB;AACA,aAAKW,aAAL,GAAqB,IAAIT,aAAJ,EAArB;AACA,aAAKU,WAAL,GAAmB,IAAIT,WAAJ,EAAnB;;AAEA;AACA,aAAKU,QAAL,GAAgB,IAAIT,QAAJ,EAAhB;AACH,KAXI;;;AAaL;;;;;AAKAU,yBAlBK,iCAkBiBC,UAlBjB,EAkB6BC,UAlB7B,EAkByC;AAAA;;AAC1C;AACA,aAAKC,aAAL;;AAEA;AACA,YAAIC,OAAOC,OAAOD,IAAP,CAAY,IAAZ,CAAX;AACAZ,WAAGc,GAAH,CAAO,eAAP,EAAwBC,KAAKC,SAAL,CAAeJ,IAAf,CAAxB;AACAA,eAAOA,KAAKK,MAAL,CAAY,UAACC,CAAD,EAAK;AACpB,mBAAO,MAAKC,cAAL,CAAoBD,CAApB,KAA2B,MAAKA,CAAL,aAAmBnB,QAArD;AACH,SAFM,CAAP;AAGAC,WAAGc,GAAH,CAAO,eAAP,EAAwBC,KAAKC,SAAL,CAAeJ,IAAf,CAAxB;;AAV0C,mCAYjCQ,GAZiC;AAatC,gBAAIC,MAAM,MAAKD,GAAL,CAAV;AACA,gBAAIE,WAAWD,IAAIE,OAAnB;AACAvB,eAAGwB,MAAH,CAAUC,OAAV,CAAkBH,QAAlB,EAA4BtB,GAAG0B,SAA/B,EAA0C,UAACC,GAAD,EAAMC,IAAN,EAAa;AACnD,oBAAID,GAAJ,EAAS;AACL3B,uBAAG6B,KAAH,CAAS,sBAAsBP,QAAtB,GAAiC,WAAjC,GAA+CK,GAAxD;AACH,iBAFD,MAEO;AACH,wBAAIN,IAAIS,QAAR,EAAkB;AACdT,4BAAIS,QAAJ,CAAaC,IAAb,CAAkBV,GAAlB,EAAuBO,KAAKI,IAA5B;AACH;AACJ;;AAED,sBAAK7B,UAAL;AACA,oBAAIM,UAAJ,EAAgB;AACZA,+BAAW,MAAKN,UAAhB,EAA4BS,KAAKqB,MAAjC;AACH;AACD,oBAAI,MAAK9B,UAAL,IAAmBS,KAAKqB,MAA5B,EAAoC;;AAEhC,wBAAIvB,UAAJ,EAAgB;AACZA;AACH;AACJ;AACJ,aAnBD;AAfsC;;AAAA;AAAA;AAAA;;AAAA;AAY1C,iCAAgBE,IAAhB,8HAAsB;AAAA,oBAAbQ,GAAa;;AAAA,sBAAbA,GAAa;AAuBrB;AAnCyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoC7C,KAtDI;;;AAwDL;AACAT,iBAzDK,2BAyDW;AACZ,aAAKJ,QAAL,CAAc2B,QAAd;AACH,KA3DI;;AA4DL;AACAC,mBA7DK,6BA6Da;AACd,aAAK5B,QAAL,CAAc6B,QAAd;AACH;AA/DI,CAAT","file":"DataMng.js","sourceRoot":"../../../../../assets/scripts/data","sourcesContent":["/**\n * Created by skyxu on 2019/11/25.\n *\n * 数据管理, 配置数据读取, 保存读取本读数据\n */\n\nlet UpStarNeedData = require(\"./UpStarNeedData\");\nlet EnemyAttrData = require(\"./EnemyAttrData\");\nlet BgColorData = require(\"./BgColorData\");\n\nlet UserData = require(\"./UserData\");\nlet DataBase = require(\"./DataBase\");\n\ncc.Class({\n    ctor() {\n        this.loadCounts = 0;\n\n        // todo: 每添加新的配置表都需要在这里创建对应的对象\n        this.upStarNeedData = new UpStarNeedData();\n        this.enemyAttrData = new EnemyAttrData();\n        this.bgColorData = new BgColorData();\n\n        // 动态数据\n        this.userData = new UserData();\n    },\n\n    /**\n     * 读取本地配置文件\n     * @param progressCb(cur,total) 进度回调\n     * @param completeCb{Function} 读取结束回调\n     */\n    loadDataFromLocalFile(progressCb, completeCb) {\n        // 读取本地保存的用户数据\n        this.loadSavedData();\n\n        // 读取配置文件数据\n        let keys = Object.keys(this);\n        cc.log(\"====keys1: %s\", JSON.stringify(keys));\n        keys = keys.filter((k)=>{\n            return this.hasOwnProperty(k) && (this[k] instanceof DataBase);\n        });\n        cc.log(\"====keys2: %s\", JSON.stringify(keys));\n\n        for (let key of keys) {\n            let obj = this[key];\n            let fileName = obj.fileDir;\n            cc.loader.loadRes(fileName, cc.JsonAsset, (err, data)=>{\n                if (err) {\n                    cc.error(\"load local data: \" + fileName + \", error: \" + err);\n                } else {\n                    if (obj.initData) {\n                        obj.initData.call(obj, data.json);\n                    }\n                }\n\n                this.loadCounts ++;\n                if (progressCb) {\n                    progressCb(this.loadCounts, keys.length);\n                }\n                if (this.loadCounts >= keys.length) {\n\n                    if (completeCb) {\n                        completeCb();\n                    }\n                }\n            });\n        }\n    },\n\n    // 从localStorage读取数据\n    loadSavedData() {\n        this.userData.loadData();\n    },\n    // 保存数据到localStorage\n    saveDataToLocal() {\n        this.userData.saveData();\n    }\n});\n"]}